"""
Models for the Bedrock agent.
"""

from enum import StrEnum
from typing import Any

from pydantic import BaseModel, Field

#######################
# Agent Event Classes #
#######################


class AgentEventTypes(StrEnum):
    """Enumeration of possible agent event types."""

    THINKING = "thinking"
    ANSWER = "answer"
    TOOL_USE = "tool_use"
    DELEGATION = "delegation"


class AgentEvent(BaseModel):
    """Base class for all agent events.

    :param type: The type of event
    :param content: The content of the event
    """

    type: AgentEventTypes
    content: Any

    class Config:
        use_enum_values = True


class ToolUseData(BaseModel):
    """Data model for tool usage information.

    :param name: Name of the tool being used
    :param parameters: Parameters passed to the tool
    :param result: Result returned by the tool
    """

    name: str
    parameters: dict[str, Any] = Field(default_factory=dict)
    result: str | None = None


class ToolUseEvent(AgentEvent):
    """Event representing an agent's use of a tool."""

    type: AgentEventTypes = AgentEventTypes.TOOL_USE
    content: ToolUseData


class ThinkingEvent(AgentEvent):
    """Event representing an agent's thinking process."""

    type: AgentEventTypes = AgentEventTypes.THINKING
    content: str


class AnswerEvent(AgentEvent):
    """Event representing an agent's answer."""

    type: AgentEventTypes = AgentEventTypes.ANSWER
    content: str


#############################
# Delegation Related Models #
#############################


class DelegateData(BaseModel):
    """Data model for delegation information.

    :param agent_name: Name of the delegate agent
    :param query: Query passed to the delegate
    :param answer: Answer returned by the delegate
    :param events: List of events generated by the delegate agent
    """

    agent_name: str
    query: str
    answer: str | None = None
    events: list[AgentEvent] = Field(
        default_factory=list,
        description="List of events generated by the delegate agent.",
    )


class DelegateEvent(AgentEvent):
    """Event representing an agent delegating a task to another agent."""

    type: AgentEventTypes = AgentEventTypes.DELEGATION
    content: DelegateData


###################
# Response Models #
###################


class AgentResponse(BaseModel):
    """Model representing a complete response from an agent.

    :param answer: The final answer from the agent
    :param events: List of events that occurred during the agent's execution
    """

    answer: str
    events: list[AgentEvent]

    class Config:
        use_enum_values = True
